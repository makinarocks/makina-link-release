#!/usr/bin/env python3
"""
Perform a development install of mrx_link.

    On Binder, this will run _after_ the environment has been fully created from
    the environment.yml in this directory.

    This script should also run locally on Linux/MacOS/Windows:

        python3 binder/postBuild
"""
import os
import shutil
import subprocess
import sys
from pathlib import Path
from typing import Any

ROOT: Path = Path.cwd()


def _(*args: Any, **kwargs: Any) -> Any:
    """Run a command, echoing the args

    fails hard if something goes wrong
    """
    print("\n\t", " ".join(args), "\n")
    return_code: int = subprocess.call(args, **kwargs)
    if return_code != 0:
        print("\nERROR", return_code, " ".join(args))
        sys.exit(return_code)


# Verify the environment is self-consistent before even starting.
_(sys.executable, "-m", "pip", "check")

# Uninstall the labextension.
_(sys.executable, "-m", "pip", "uninstall", "--yes", "jupyter-offlinenotebook")

# Verify the environment the extension didn't break anything.
_(sys.executable, "-m", "pip", "check")

# List the extensions.
_(sys.executable, "-m", "jupyter", "server", "extension", "list")

# Initially list installed extensions to determine if there are any surprises.
_(sys.executable, "-m", "jupyter", "labextension", "list")

# Copy Jupyter notebook configuration.
if not os.path.exists(os.path.join(os.environ["HOME"], ".jupyter")):
    os.makedirs(os.path.join(os.environ["HOME"], ".jupyter"))

shutil.copyfile(
    os.path.join("binder", "jupyter_notebook_config.py"),
    os.path.join(os.environ["HOME"], ".jupyter", "jupyter_notebook_config.py"),
)

print("JupyterLab with mrx_link is ready to run with:\n")
print("\tpython3 -m jupyterlab\n")
